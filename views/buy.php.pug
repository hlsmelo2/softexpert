extends layout/layout.php

block main
    section#buy
        span(v-if="canShowMessage" @click, @mouseover="hideMessage()" class="alert alert-danger") {{ alertMessage }}
        h1 Buy
        ul#cart.wrapper-2
            li(v-for="(item, index) of cart" :key="index")
                img(:src="item.product.image")
                div.data
                    div.line
                        label ID
                        span.id {{ item.product.id }}
                    div.line
                        label Name
                        span.name {{ item.product.name }}
                    div.line
                        label Price
                        span.price {{ item.product.price }}
                    div.line
                        label Type
                        span.type_name {{ item.product.type_name }}
                    div.line
                        label Tax
                        span.tax {{ killSymbol(item.product.tax) }}%
                    div.line
                        label Quantity
                        input(v-model="item.quantity" type="number")
                    div.line 
                        label Subtotal
                        span.subtotal {{ item.subtotal }}
                    div.line
                        label Subtotal Taxes
                        span.subtotal-tax {{ item.subtotalTaxes }}
        h2 Totals
        div#totals
            label Total
            span {{ getCurrency(total) }}
            label Total Taxes
            span {{ getCurrency(totalTaxes) }}
       
        button(@click="register()" class="btn btn-primary") Buy
    style.
        ul#cart,
        ul#cart ul { list-style-type: none; }

        ul#cart li img,
        ul#cart div.data {
            display: inline-block;
            width: 50%;
        }

        ul#cart li {}
        ul#cart label { width: 100px; }
    script.
        main.vue = {
            el: 'section#buy',
            data() {
                return {
                    input: {
                        name: 'Product name',
                        password: 'Product description',
                    },
                    total: null,
                    totalTaxes: null,
                    cart: [],
                    canShowMessage: false,
                    alertMessage: '',
                };
            },
            methods: {
                showMessage(message) {
                    this.canShowMessage = true;
                    this.alertMessage = message;
                },
                hideMessage() {
                    this.canShowMessage = false;
                },
                updateCart() {
                    const vue = this;
                    
                    const data = {
                        total: 0,
                        totalTaxes: 0,
                    };

                    vue.cart.forEach(function(item) {
                        const subtotal = vue.getSubTotal(item);
                        const subtotalTaxes = vue.getSubTotalTaxes(item);

                        data.total += subtotal;
                        data.totalTaxes += subtotalTaxes;

                        item.subtotal = vue.getCurrency(subtotal);
                        item.subtotalTaxes = vue.getCurrency(subtotalTaxes);
                    });

                    vue.total = vue.givePrecision(data.total);
                    vue.totalTaxes = vue.givePrecision(data.totalTaxes);
                },
                givePrecision(floatValue) {
                    return (floatValue).toFixed(2);
                },
                getFloat(currencyValue) {
                    const data = {};

                    data.value = currencyValue.replace(/[^,.0-9]/g, '');
                    data.reverse = data.value.split('').reverse().join('');
                    data.match = data.reverse.match(/[^,.]+/g);
                    data.match[0] += (data.match.length > 1) ? '.' : '';
                    data.floatValue = data.match.join('').split('').reverse().join('');

                    return this.givePrecision( parseFloat(data.floatValue) );
                },
                killSymbol(currencyValue) {
                    return currencyValue.replace('R$', '');
                },
                getCurrency(floatValue) {
                    const data = {};

                    data.reverse = String(floatValue).split('').reverse().join('');
                    data.split = data.reverse.split('.');
                    data.cents = (data.split.length > 1) ? data.split[0] : '00';
                    data.cents = data.cents.replace(/^(\d)$/, '0$1');
                    data.value = (data.split.length > 1) ? data.split[1] : data.split[0];
                    data.thousands = data.value.replace(/([0-9]{3})/g, '$1.');
                    data.currency = [data.cents, data.thousands].join(',').replace(/\.+$/, '');
                  
                    return 'R$ ' + data.currency.split('').reverse().join('');
                },
                getSubTotal(item) {
                    return this.getFloat(item.product.price) * item.quantity;
                },
                getSubTotalTaxes(item) {
                    const subtotalTaxes = this.getSubTotal(item) * (this.getFloat(item.product.tax) / 100);

                    return this.givePrecision(subtotalTaxes);
                },
                register() {
                    const vue = this;
                    const url = main.getApiUrl('sale');

                    const body = {
                        cart: JSON.stringify(vue.cart),
                        total: vue.total,
                        total_taxes: vue.totalTaxes,
                    };

                    main.getJSONRequest(url, 'POST', { body })
                        .then(function(json) {                            
                            vue.showMessage(json.message);
                        });
                },
            },
            updated() {
                this.updateCart();
            },
            mounted() {
                const cart = localStorage.getItem('cart');
                
                this.cart = (cart === null) ? [] : JSON.parse(cart);
                this.updateCart();
            },
        };
